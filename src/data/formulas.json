[
  {
    "name": "if",
    "id": 1,
    "type": "Functions",
    "description": "Returns the first value if the condition is true; otherwise, returns the second value.",
    "category": "Conditional",
    "accepts": "Boolean",
    "returns": "All Data Types",
    "iconAccepts": "boolean.svg",
    "iconReturns": "various.svg",
    "other": "? :",
    "examples": "if(true, 1, 2)\n/* => 1 */\n```\n\n```js\ntrue.if(1, 2)\n/* => 1 */",
    "exampleBasic": "if(true, 1, 2)",
    "exampleBasicDot": "true.if(1, 2)",
    "linkNotion": "e3fcf03c5c98451181958ba7eb58214f",
    "new": ""
  },
  {
    "name": "ifs",
    "id": 2,
    "type": "Functions",
    "description": "Returns the value that corresponds to the first true condition. This can be used as an alternative to multiple nested `if` statements.",
    "category": "Conditional",
    "accepts": "Boolean",
    "returns": "All Data Types",
    "iconAccepts": "boolean.svg",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "ifs(true, 1, true, 2, 3)\n/* => 1 */\n```\n\n```js\ntrue.ifs(1, true, 2, 3)\n/* => 1 */",
    "exampleBasic": "ifs(true, 1, true, 2, 3)",
    "exampleBasicDot": "",
    "linkNotion": "230a126848784fe6845f73a64f1ea4f0",
    "new": "2.0"
  },
  {
    "name": "and",
    "id": 3,
    "type": "Functions",
    "description": "The boolean operator and.",
    "category": "Logical",
    "accepts": "Boolean",
    "returns": "Boolean",
    "iconAccepts": "boolean.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "and(true, true, true)\n/* => true */\n```\n\n```js\ntrue.and(true, true)\n/* => true */",
    "exampleBasic": "and(true, true, true)",
    "exampleBasicDot": "",
    "linkNotion": "05895e0e81004fc68b74e92063e34034",
    "new": ""
  },
  {
    "name": "or",
    "id": 4,
    "type": "Functions",
    "description": "The boolean operator or.",
    "category": "Logical",
    "accepts": "Boolean",
    "returns": "Boolean",
    "iconAccepts": "boolean.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "or(true, false, false)\n/* => true */\n```\n\n```js\ntrue.or(false, false)\n/* => true */",
    "exampleBasic": "or(true, false, false)",
    "exampleBasicDot": "",
    "linkNotion": "2dda9a0b9f464d68804b7eb88581731f",
    "new": ""
  },
  {
    "name": "empty",
    "id": 5,
    "type": "Functions",
    "description": "Returns true if the value is empty. `0`, `\"\"`, `false`, and `[]` are considered empty.",
    "category": "Checking",
    "accepts": "All Data Types",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "empty(0)\n/* => true */\n```\n\n```js\n0.empty()\n/* => true */",
    "exampleBasic": "empty(0)",
    "exampleBasicDot": "",
    "linkNotion": "24fe54f9484140a28a9ff7e25dd3e1ed",
    "new": ""
  },
  {
    "name": "length",
    "id": 6,
    "type": "Functions",
    "description": "Returns the length of the text or list value.",
    "category": "Strings",
    "accepts": "String",
    "returns": "Number",
    "iconAccepts": "string.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "length(\"hello\")\n/* => 5 */\n```\n\n```js\n\"hello\".length()\n/* => 5 */",
    "exampleBasic": "length(\"hello\")",
    "exampleBasicDot": "",
    "linkNotion": "bddea8a85a3444699ea656af42e0c53c",
    "new": ""
  },
  {
    "name": "substring",
    "id": 7,
    "type": "Functions",
    "description": "Returns the substring of the text from the start index (inclusive) to the end index (optional and exclusive).",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "substring(\"Notion\", 0, 3)\n/* => \"Not */\n```\n\n```js\n\"Not\".substring(0, 3)\n/* => \"Not\" */",
    "exampleBasic": "substring(\"Notion\", 0, 3)",
    "exampleBasicDot": "",
    "linkNotion": "623844f5ee7147228dcc94ea68eefde9",
    "new": "2.0"
  },
  {
    "name": "contains",
    "id": 8,
    "type": "Functions",
    "description": "Returns true if the search string is present in the value.",
    "category": "Strings",
    "accepts": "String",
    "returns": "Boolean",
    "iconAccepts": "string.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "contains(\"Notion\", \"ot\")\n/* => true */",
    "exampleBasic": "contains(\"Notion\", \"ot\")",
    "exampleBasicDot": "",
    "linkNotion": "8f16ae1e5ed9474c8311deb43ffe6834",
    "new": ""
  },
  {
    "name": "test",
    "id": 9,
    "type": "Functions",
    "description": "Returns `true` if the value matches the regular expression and `false` otherwise.",
    "category": "Strings",
    "accepts": "String",
    "returns": "Boolean",
    "iconAccepts": "string.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "test(\"Notion\", \"Not\")\n/* => true */",
    "exampleBasic": "test(\"Notion\", \"Not\")",
    "exampleBasicDot": "",
    "linkNotion": "fd12107cd2d64438aba853b462348a5a",
    "new": ""
  },
  {
    "name": "match ",
    "id": 10,
    "type": "Functions",
    "description": "Returns all matches of the regular expression as a list.",
    "category": "Strings",
    "accepts": "String",
    "returns": "List",
    "iconAccepts": "string.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "match(\"Notion Notion\", \"Not\")\n/* => [\"Not\", \"Not\"] */",
    "exampleBasic": "match(\"Notion Notion\", \"Not\")",
    "exampleBasicDot": "",
    "linkNotion": "2e065854c9634dbe8e30d251db91d341",
    "new": "2.0"
  },
  {
    "name": "replace",
    "id": 11,
    "type": "Functions",
    "description": "Replaces the first match of the regular expression with the replacement value.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "replace(\"Notion Notion\", \"N\", \"M\")\n/* => \"Motion Notion\" */",
    "exampleBasic": "replace(\"Notion Notion\", \"N\", \"M\")",
    "exampleBasicDot": "",
    "linkNotion": "543a48a3c2b94bafa2671a6438a556ff",
    "new": ""
  },
  {
    "name": "replaceAll",
    "id": 12,
    "type": "Functions",
    "description": "Replaces all matches of the regular expression with the replacement value.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "replaceAll(\"Notion Notion\", \"N\", \"M\")\n/* => \"Motion Motion\" */",
    "exampleBasic": "replaceAll(\"Notion Notion\", \"N\", \"M\")",
    "exampleBasicDot": "",
    "linkNotion": "8632d1840e974979b93868bd133b4a68",
    "new": ""
  },
  {
    "name": "lower ",
    "id": 13,
    "type": "Functions",
    "description": "Converts the text to lowercase.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "lower(\"NOTION\")\n/* => \"notion\" */",
    "exampleBasic": "lower(\"NOTION\")",
    "exampleBasicDot": "",
    "linkNotion": "5fb6c76c57434b20924d39cc958ab54b",
    "new": "2.0"
  },
  {
    "name": "upper ",
    "id": 14,
    "type": "Functions",
    "description": "Converts the text to uppercase.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "upper(\"notion\")\n/* => \"NOTION\" */",
    "exampleBasic": "upper(\"notion\")",
    "exampleBasicDot": "",
    "linkNotion": "b4d24f66fbb649b99c3cc08a99555a88",
    "new": "2.0"
  },
  {
    "name": "repeat",
    "id": 15,
    "type": "Functions",
    "description": "Repeats the text a given number of times.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "repeat(\"0\", 4)\n/* => \"0000\" */",
    "exampleBasic": "repeat(\"0\", 4)",
    "exampleBasicDot": "",
    "linkNotion": "bcb112733d3b433d8356229806f8f426",
    "new": "2.0"
  },
  {
    "name": "link ",
    "id": 16,
    "type": "Functions",
    "description": "Creates a hyperlink from the label text and the URL.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "link(\"Notion\", \"https://notion.so\")\n/* => \"Notion\" */",
    "exampleBasic": "link(\"Notion\", \"https://notion.so\")",
    "exampleBasicDot": "",
    "linkNotion": "833d4df39c2d43b398ba6ecdc73aa327",
    "new": "2.0"
  },
  {
    "name": "style",
    "id": 17,
    "type": "Functions",
    "description": "Adds styles and colors to the text. Valid formatting styles: \"b\" (bold), \"u\" (underline), \"i\" (italics), \"c\" (code), or \"s\" (strikethrough). Valid colors: \"gray\", \"brown\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\", and \"red\". Add \"_background\" to colors to set background colors.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "style(\"Notion\", \"b\", \"u\")\n/* => \"Notion\" */",
    "exampleBasic": "style(\"Notion\", \"b\", \"u\")",
    "exampleBasicDot": "",
    "linkNotion": "2be5c4a4a2cf48d398c8579065a62ca1",
    "new": "2.0"
  },
  {
    "name": "unstyle ",
    "id": 18,
    "type": "Functions",
    "description": "Removes formatting styles from the text. If no styles are specified, all styles are removed.",
    "category": "Strings",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "unstyle(\"Text\")\n/* => \"Text\" */",
    "exampleBasic": "unstyle(\"Text\")",
    "exampleBasicDot": "",
    "linkNotion": "ab9cfa1799064b9ea7bb9763390b7b7b",
    "new": "2.0"
  },
  {
    "name": "format",
    "id": 19,
    "type": "Functions",
    "description": "Returns the value formatted as text.",
    "category": "Strings",
    "accepts": "All Data Types",
    "returns": "String",
    "iconAccepts": "various.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "format(1234)\n/* => \"1234\" */",
    "exampleBasic": "format(1234)",
    "exampleBasicDot": "",
    "linkNotion": "9e30576121b2454bb5100b64df265138",
    "new": ""
  },
  {
    "name": "add",
    "id": 20,
    "type": "Functions",
    "description": "Returns the sum of two numbers.",
    "category": "Numbers",
    "accepts": "String, Number",
    "returns": "String, Number",
    "iconAccepts": "various.svg",
    "iconReturns": "various.svg",
    "other": "+",
    "examples": "add(5, 10)\n/* => 15 */\n```\n\n```js\n5.add(10)\n/* => 15 */",
    "exampleBasic": "add(5, 10)",
    "exampleBasicDot": "",
    "linkNotion": "b3c88538fc204d848f3aa2a433606257",
    "new": ""
  },
  {
    "name": "subtract",
    "id": 21,
    "type": "Functions",
    "description": "Returns the difference of two numbers.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "-",
    "examples": "subtract(5, 10)\n/* => -5 */",
    "exampleBasic": "subtract(5, 10)",
    "exampleBasicDot": "",
    "linkNotion": "3b068e8814a04cfa887d8f4029c29f50",
    "new": ""
  },
  {
    "name": "multiply",
    "id": 22,
    "type": "Functions",
    "description": "Returns the product of two numbers.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "*",
    "examples": "multiply(5, 10)\n/* => 50 */",
    "exampleBasic": "multiply(5, 10)",
    "exampleBasicDot": "",
    "linkNotion": "232fda48c6e34224b2c027ade4b5772c",
    "new": ""
  },
  {
    "name": "mod",
    "id": 23,
    "type": "Functions",
    "description": "Returns the first number modulo the second number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "%",
    "examples": "mod(5, 10)\n/* => 5 */",
    "exampleBasic": "mod(5, 10)",
    "exampleBasicDot": "",
    "linkNotion": "8d83fb5f44d744b5b4a045a3ac502961",
    "new": ""
  },
  {
    "name": "pow",
    "id": 24,
    "type": "Functions",
    "description": "Returns the result of a base number raised to an exponent power.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "^",
    "examples": "pow(5, 10)\n/* => 9765625 */",
    "exampleBasic": "pow(5, 10)",
    "exampleBasicDot": "",
    "linkNotion": "a7e3772c2e714b27aa7c8391b32c8adf",
    "new": ""
  },
  {
    "name": "divide",
    "id": 25,
    "type": "Functions",
    "description": "Returns the quotient of two numbers.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "/",
    "examples": "divide(5, 10)\n/* => 0.5 */",
    "exampleBasic": "divide(5, 10)",
    "exampleBasicDot": "",
    "linkNotion": "fd20f9547ba841e89d11eded7b9afeb0",
    "new": ""
  },
  {
    "name": "min",
    "id": 26,
    "type": "Functions",
    "description": "Returns the smallest number of the arguments.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "min(1, 2, 3)\n/* => 1 */",
    "exampleBasic": "min(1, 2, 3)",
    "exampleBasicDot": "",
    "linkNotion": "900498823bbe4284bd8f88d35b2b4e0e",
    "new": ""
  },
  {
    "name": "max",
    "id": 27,
    "type": "Functions",
    "description": "Returns the largest number of the arguments.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "max(1, 2, 3)\n/* => 3 */",
    "exampleBasic": "max(1, 2, 3)",
    "exampleBasicDot": "",
    "linkNotion": "cf2d50a499ae49b69df36670c3fb4da6",
    "new": ""
  },
  {
    "name": "sum ",
    "id": 28,
    "type": "Functions",
    "description": "Returns the sum of its arguments.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "sum(1, 2, 3)\n/* => 6 */",
    "exampleBasic": "sum(1, 2, 3)",
    "exampleBasicDot": "",
    "linkNotion": "336d5549bfbf4cf5bfb2e465bdeeda4a",
    "new": "2.0"
  },
  {
    "name": "abs",
    "id": 29,
    "type": "Functions",
    "description": "Returns the absolute value of the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "abs(10)\n/* => 10 */\n```\n\n```js\n10.abs()/* => 10 */",
    "exampleBasic": "abs(10)",
    "exampleBasicDot": "",
    "linkNotion": "d1be55ffac08417491fab6bc6efab915",
    "new": ""
  },
  {
    "name": "round",
    "id": 30,
    "type": "Functions",
    "description": "Returns the value of a number rounded to the nearest integer.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "round(0.4)\n/* => 0 */",
    "exampleBasic": "round(0.4)",
    "exampleBasicDot": "",
    "linkNotion": "012a4b94127a49529c3ff196b28d16bf",
    "new": ""
  },
  {
    "name": "ceil",
    "id": 31,
    "type": "Functions",
    "description": "Returns the smallest integer greater than or equal to the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "ceil(0.4)\n/* => 1 */",
    "exampleBasic": "ceil(0.4)",
    "exampleBasicDot": "",
    "linkNotion": "922a44dc59fe42c89eb349a3c9f2445d",
    "new": ""
  },
  {
    "name": "floor",
    "id": 32,
    "type": "Functions",
    "description": "Returns the largest integer less than or equal to the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "floor(0.4)\n/* => 0 */",
    "exampleBasic": "floor(0.4)",
    "exampleBasicDot": "",
    "linkNotion": "0f9980283de8410aa80bb2f7bfe05fb0",
    "new": ""
  },
  {
    "name": "sqrt",
    "id": 33,
    "type": "Functions",
    "description": "Returns the positive square root of the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "sqrt(4)\n/* => 2 */",
    "exampleBasic": "sqrt(4)",
    "exampleBasicDot": "",
    "linkNotion": "2b0633b2227f4f8eb43270e74fecf3a3",
    "new": ""
  },
  {
    "name": "cbrt",
    "id": 34,
    "type": "Functions",
    "description": "Returns the cube root of the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "cbrt(9)\n/* => 2.080083823051904 */",
    "exampleBasic": "cbrt(9)",
    "exampleBasicDot": "",
    "linkNotion": "00bb95d63d414fbaabb4aad0f389315f",
    "new": ""
  },
  {
    "name": "exp",
    "id": 35,
    "type": "Functions",
    "description": "Returns e^x, where x is the argument, and e is Euler's number (2.718…), the base of the natural logarithm.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "exp(1)\n/* => 2.718281828459045 */",
    "exampleBasic": "exp(1)",
    "exampleBasicDot": "",
    "linkNotion": "cc8037df64a54da7a1f3dc7d632522b2",
    "new": ""
  },
  {
    "name": "ln",
    "id": 36,
    "type": "Functions",
    "description": "Returns the natural logarithm of the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "ln(2.718281828459045)\n/* => 1 */",
    "exampleBasic": "ln(2.718281828459045)",
    "exampleBasicDot": "",
    "linkNotion": "305e626c021f4b8aa1297f40839ad93f",
    "new": ""
  },
  {
    "name": "log10",
    "id": 37,
    "type": "Functions",
    "description": "Returns the base 10 logarithm of the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "log10(10)\n/* => 1 */",
    "exampleBasic": "log10(10)",
    "exampleBasicDot": "",
    "linkNotion": "50dce63d4cef4f4e92dee1210fef090b",
    "new": ""
  },
  {
    "name": "log2",
    "id": 38,
    "type": "Functions",
    "description": "Returns the base 2 logarithm of the number.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "log2(4)\n/* => 2 */",
    "exampleBasic": "log2(4)",
    "exampleBasicDot": "",
    "linkNotion": "5abbdc36d93542929c700fb09d3b266e",
    "new": ""
  },
  {
    "name": "sign",
    "id": 39,
    "type": "Functions",
    "description": "Returns 1 if the number is positive, -1 if it is negative, and 0 if it is zero.",
    "category": "Numbers",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "sign(-10)\n/* => -1 */",
    "exampleBasic": "sign(-10)",
    "exampleBasicDot": "",
    "linkNotion": "38cae13c7fa441aa8979c907b00a6335",
    "new": ""
  },
  {
    "name": "pi",
    "id": 40,
    "type": "Functions",
    "description": "Returns the ratio of a circle's circumference to its diameter.",
    "category": "Numbers",
    "accepts": "—",
    "returns": "Number",
    "iconAccepts": "",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "pi()\n/* => 3.141592653589793 */",
    "exampleBasic": "pi()",
    "exampleBasicDot": "",
    "linkNotion": "b61d9e38cc654321bfa223b8c8b5714a",
    "new": ""
  },
  {
    "name": "e",
    "id": 41,
    "type": "Functions",
    "description": "Returns the base of the natural logarithm.",
    "category": "Numbers",
    "accepts": "—",
    "returns": "Number",
    "iconAccepts": "",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "e()\n/* => 2.718281828459045 */",
    "exampleBasic": "e()",
    "exampleBasicDot": "",
    "linkNotion": "313a14b769284b09894f7e9095405ff8",
    "new": ""
  },
  {
    "name": "toNumber",
    "id": 42,
    "type": "Functions",
    "description": "Parses a number from text.",
    "category": "Numbers",
    "accepts": "String",
    "returns": "String",
    "iconAccepts": "string.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "toNumber(\"2\")\n/* => 2 */",
    "exampleBasic": "toNumber(\"2\")",
    "exampleBasicDot": "",
    "linkNotion": "176ffb3a0a444e6cbf48b06788024884",
    "new": ""
  },
  {
    "name": "now",
    "id": 43,
    "type": "Functions",
    "description": "Returns the current date and time.",
    "category": "Dates",
    "accepts": "—",
    "returns": "Date",
    "iconAccepts": "",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "now()\n/* => September 7, 2023 10:00 AM */",
    "exampleBasic": "now()",
    "exampleBasicDot": "",
    "linkNotion": "907a37d8916e4bb79fa7fad3a2e2c615",
    "new": ""
  },
  {
    "name": "minute",
    "id": 44,
    "type": "Functions",
    "description": "Returns the minute of the date (0-59).",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "minute(parseDate(\"2023-07-10T17:35Z\"))\n/* => 35 */",
    "exampleBasic": "minute(parseDate(\"2023-07-10T17:35Z\"))",
    "exampleBasicDot": "",
    "linkNotion": "29608f075a6744be80926be0b99077f3",
    "new": ""
  },
  {
    "name": "hour",
    "id": 45,
    "type": "Functions",
    "description": "Returns the hour of the date (0-23).",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "hour(parseDate(\"2023-07-10T17:35Z\"))\n/* => 18 */",
    "exampleBasic": "hour(parseDate(\"2023-07-10T17:35Z\"))",
    "exampleBasicDot": "",
    "linkNotion": "355815d359aa4d05b7251f075fb0fc83",
    "new": ""
  },
  {
    "name": "day",
    "id": 46,
    "type": "Functions",
    "description": "Returns the day of the week of the date, between 1 (Monday) and 7 (Sunday).",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "day(parseDate(\"2023-07-10T17:35Z\"))\n/* => 1 */",
    "exampleBasic": "day(parseDate(\"2023-07-10T17:35Z\"))",
    "exampleBasicDot": "",
    "linkNotion": "6df0a19a5d684e2184612afde4f99f84",
    "new": ""
  },
  {
    "name": "date",
    "id": 47,
    "type": "Functions",
    "description": "Returns the day of the month from the date (1-31).",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "date(parseDate(\"2023-07-10T17:35Z\"))\n/* => 10 */",
    "exampleBasic": "date(parseDate(\"2023-07-10T17:35Z\"))",
    "exampleBasicDot": "",
    "linkNotion": "98e3f3b9d69445b19c740ed5dfeab1e0",
    "new": ""
  },
  {
    "name": "week ",
    "id": 48,
    "type": "Functions",
    "description": "Returns the ISO week of the year of the date (1-53).",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "week(parseDate(\"2023-01-02\"))\n/* => 1 */",
    "exampleBasic": "week(parseDate(\"2023-01-02\"))",
    "exampleBasicDot": "",
    "linkNotion": "b7a5dc33296646ffa955e3e23d3ee8f9",
    "new": "2.0"
  },
  {
    "name": "month",
    "id": 49,
    "type": "Functions",
    "description": "Returns the month of the date (1-12).",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "month(parseDate(\"2023-07-10T17:35Z\"))\n/* => 7 */",
    "exampleBasic": "month(parseDate(\"2023-07-10T17:35Z\"))",
    "exampleBasicDot": "",
    "linkNotion": "a98c49d3adb543f5a0be67bb56497c14",
    "new": ""
  },
  {
    "name": "year",
    "id": 50,
    "type": "Functions",
    "description": "Returns the year of the date.",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "year(now())\n/* => 2023 */",
    "exampleBasic": "year(now())",
    "exampleBasicDot": "",
    "linkNotion": "dbc4f5f1d6664153b021cf29fd9a46a2",
    "new": ""
  },
  {
    "name": "dateAdd",
    "id": 51,
    "type": "Functions",
    "description": "Adds time to the date. The unit argument can be one of: \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", or \"minutes\".",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Date",
    "iconAccepts": "date.svg",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "dateAdd(now(), 1, \"days\")\n/* => September 8, 2023 10:00 AM */",
    "exampleBasic": "dateAdd(now(), 1, \"days\")",
    "exampleBasicDot": "",
    "linkNotion": "b1d9431290584b299449cb20dae82c3a",
    "new": ""
  },
  {
    "name": "dateSubtract",
    "id": 52,
    "type": "Functions",
    "description": "Subtracts time from the date. The unit argument can be one of: \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", or \"minutes\".",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Date",
    "iconAccepts": "date.svg",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "dateSubtract(now(), 1, \"days\")\n/* => September 6, 2023 10:00 AM */",
    "exampleBasic": "dateSubtract(now(), 1, \"days\")",
    "exampleBasicDot": "",
    "linkNotion": "08bdb709cd4846ff8454aa974cbf9967",
    "new": ""
  },
  {
    "name": "dateBetween",
    "id": 53,
    "type": "Functions",
    "description": "Returns the difference between two dates. The unit argument can be one of: \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", or \"minutes\".",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "dateBetween(now(), parseDate(\"2022-09-07\"), \"days\")\n/* => 366 */",
    "exampleBasic": "dateBetween(now(), parseDate(\"2022-09-07\"), \"days\")",
    "exampleBasicDot": "",
    "linkNotion": "9e55e2c77f4241e1b109586502b21403",
    "new": ""
  },
  {
    "name": "dateRange",
    "id": 54,
    "type": "Functions",
    "description": "Returns a date range constructed from the start and end dates.",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Date",
    "iconAccepts": "date.svg",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "dateRange(prop(\"Start Date\"), prop(\"End Date\"))\n/* => September 7, 2023 10:00 AM → September 8, 2023 10:00 AM */",
    "exampleBasic": "dateRange(prop(\"Start Date\"), prop(\"End Date\"))",
    "exampleBasicDot": "",
    "linkNotion": "ec898372a00248ea81e1ebfe310b7f1f",
    "new": "2.0"
  },
  {
    "name": "dateStart",
    "id": 55,
    "type": "Functions",
    "description": "Returns the start of the date range.",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Date",
    "iconAccepts": "date.svg",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "dateStart(prop(\"Date\"))\n/* => September 7, 2023 10:00 AM */",
    "exampleBasic": "dateStart(prop(\"Date\"))",
    "exampleBasicDot": "",
    "linkNotion": "439873f0efac40baae19128ee9285845",
    "new": ""
  },
  {
    "name": "dateEnd",
    "id": 56,
    "type": "Functions",
    "description": "Returns the end of the date range.",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Date",
    "iconAccepts": "date.svg",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "dateEnd(prop(\"Date\"))\n/* => September 8, 2023 10:00 AM */",
    "exampleBasic": "dateEnd(prop(\"Date\"))",
    "exampleBasicDot": "",
    "linkNotion": "f8c6e424c11245d0aa8c79efc85ecb14",
    "new": ""
  },
  {
    "name": "timestamp",
    "id": 57,
    "type": "Functions",
    "description": "Returns the current Unix timestamp, representing the number of milliseconds that have elapsed since January 1, 1970.",
    "category": "Dates",
    "accepts": "Date",
    "returns": "Number",
    "iconAccepts": "date.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "timestamp(now())\n/* => 1694077200000 */",
    "exampleBasic": "timestamp(now())",
    "exampleBasicDot": "",
    "linkNotion": "0b19a62337a440f9955d8884dc02c9fb",
    "new": ""
  },
  {
    "name": "fromTimestamp",
    "id": 58,
    "type": "Functions",
    "description": "Returns the date from the given Unix timestamp. The timestamp represents the number of milliseconds that have elapsed since January 1, 1970. Note: the returned date will not retain the seconds & milliseconds.",
    "category": "Dates",
    "accepts": "Number",
    "returns": "Date",
    "iconAccepts": "number.svg",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "fromTimestamp(1694077200000)\n/* => September 7, 2023 10:00 AM */",
    "exampleBasic": "fromTimestamp(1694077200000)",
    "exampleBasicDot": "",
    "linkNotion": "c6e4f150824340b7b67f63a35d9f4eb7",
    "new": ""
  },
  {
    "name": "formatDate",
    "id": 59,
    "type": "Functions",
    "description": "Formats the date using a custom format string. The format string can contain the following text to represent parts of the date: \"YYYY\" for year, \"MM\" for month, \"DD\" for day, \"HH\" for hour, \"mm\" for minute.",
    "category": "Dates",
    "accepts": "Date",
    "returns": "String",
    "iconAccepts": "date.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "formatDate(now(), \"MMMM D, Y\")\n/* => \"September 7, 2023\" */",
    "exampleBasic": "formatDate(now(), \"MMMM D, Y\")",
    "exampleBasicDot": "",
    "linkNotion": "a3c4b6de812743808871026ec3006bf9",
    "new": ""
  },
  {
    "name": "parseDate ",
    "id": 60,
    "type": "Functions",
    "description": "Returns the date parsed according to the ISO 8601 standard.",
    "category": "Dates",
    "accepts": "String",
    "returns": "Date",
    "iconAccepts": "string.svg",
    "iconReturns": "date.svg",
    "other": "",
    "examples": "parseDate(\"2022-01-01\")\n/* => January 1, 2022 */",
    "exampleBasic": "parseDate(\"2022-01-01\")",
    "exampleBasicDot": "",
    "linkNotion": "f23dc9ecd2f94fa59ea7d0cf6b52a305",
    "new": "2.0"
  },
  {
    "name": "name ",
    "id": 61,
    "type": "Functions",
    "description": "Returns the name of a person.",
    "category": "People",
    "accepts": "Person",
    "returns": "String",
    "iconAccepts": "person.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "name(prop(\"Created By\"))\n/* => \"Ben Smith\" */",
    "exampleBasic": "name(prop(\"Created By\"))",
    "exampleBasicDot": "",
    "linkNotion": "10c97aba4f7849aa80f19a59dba853ba",
    "new": "2.0"
  },
  {
    "name": "email ",
    "id": 62,
    "type": "Functions",
    "description": "Returns the email address of a person.",
    "category": "People",
    "accepts": "Person",
    "returns": "String",
    "iconAccepts": "person.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "email(prop(\"Created By\"))\n/* => \"ben@bensomething.com\" */",
    "exampleBasic": "email(prop(\"Created By\"))",
    "exampleBasicDot": "",
    "linkNotion": "1d3079287541467aa791dde1f2036278",
    "new": "2.0"
  },
  {
    "name": "at",
    "id": 63,
    "type": "Functions",
    "description": "Returns the value at the specified index in a list.",
    "category": "Lists",
    "accepts": "List",
    "returns": "All Data Types",
    "iconAccepts": "list.svg",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "at([1, 2, 3], 1)\n/* => 2 */",
    "exampleBasic": "at([1, 2, 3], 1)",
    "exampleBasicDot": "",
    "linkNotion": "31f1a595d8004a81a4b1a465d20948bc",
    "new": "2.0"
  },
  {
    "name": "first",
    "id": 64,
    "type": "Functions",
    "description": "Returns the first item in the list.",
    "category": "Lists",
    "accepts": "List",
    "returns": "All Data Types",
    "iconAccepts": "list.svg",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "first([1, 2, 3])\n/* => 1 */",
    "exampleBasic": "first([1, 2, 3])",
    "exampleBasicDot": "",
    "linkNotion": "9c1bd36a5db64b6da5f1da0d00a20a7b",
    "new": "2.0"
  },
  {
    "name": "last",
    "id": 65,
    "type": "Functions",
    "description": "Returns the last item in the list.",
    "category": "Lists",
    "accepts": "List",
    "returns": "All Data Types",
    "iconAccepts": "list.svg",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "last([1, 2, 3])\n/* => 3 */",
    "exampleBasic": "last([1, 2, 3])",
    "exampleBasicDot": "",
    "linkNotion": "cdd48e30c48c4c9790cf11b0544aba26",
    "new": "2.0"
  },
  {
    "name": "slice",
    "id": 66,
    "type": "Functions",
    "description": "Returns the items of the list from the provided start index (inclusive) to the end index (optional and exclusive).",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "slice([1, 2, 3], 1, 2)\n/* => [2] */",
    "exampleBasic": "slice([1, 2, 3], 1, 2)",
    "exampleBasicDot": "",
    "linkNotion": "f6ce9404ffef43dca85ac676c1e637bf",
    "new": ""
  },
  {
    "name": "concat",
    "id": 67,
    "type": "Functions",
    "description": "Returns the concatenation of multiple lists.",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "concat([1, 2], [3, 4])\n/* => [1, 2, 3, 4] */",
    "exampleBasic": "concat([1, 2], [3, 4])",
    "exampleBasicDot": "",
    "linkNotion": "73ecd1986b2f4992b2e1fb2f037520fa",
    "new": ""
  },
  {
    "name": "sort",
    "id": 68,
    "type": "Functions",
    "description": "Returns the list in sorted order.",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "sort([3, 1, 2])\n/* => [1, 2, 3] */",
    "exampleBasic": "sort([3, 1, 2])",
    "exampleBasicDot": "",
    "linkNotion": "ec4470887ab54fbe9aaaa5204bc5725f",
    "new": "2.0"
  },
  {
    "name": "reverse",
    "id": 69,
    "type": "Functions",
    "description": "Returns the reversed list.",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "reverse([\"green\", \"eggs\", \"ham\"])\n/* => [\"ham\", \"eggs\", \"green\"] */",
    "exampleBasic": "reverse([\"green\", \"eggs\", \"ham\"])",
    "exampleBasicDot": "",
    "linkNotion": "b2a457992a82492186a7392ba83b73d0",
    "new": "2.0"
  },
  {
    "name": "join",
    "id": 70,
    "type": "Functions",
    "description": "Returns the values of the list with the joiner placed between each of the values.",
    "category": "Lists",
    "accepts": "List",
    "returns": "String",
    "iconAccepts": "list.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "join([\"a\", \"b\", \"c\"], \", \")\n/* => \"a, b, c\" */",
    "exampleBasic": "join([\"a\", \"b\", \"c\"], \", \")",
    "exampleBasicDot": "",
    "linkNotion": "60596240d869418c9fc2f48cc54e8a09",
    "new": ""
  },
  {
    "name": "split ",
    "id": 71,
    "type": "Functions",
    "description": "Returns the list of values created by splitting a text by a separator.",
    "category": "Lists",
    "accepts": "String",
    "returns": "List",
    "iconAccepts": "string.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "split(\"apple,pear,orange\", \",\")\n/* => [\"apple\", \"pear\", \"orange\"] */",
    "exampleBasic": "split(\"apple,pear,orange\", \",\")",
    "exampleBasicDot": "",
    "linkNotion": "d8a4c14e34854661ae57e6be41289586",
    "new": "2.0"
  },
  {
    "name": "unique",
    "id": 72,
    "type": "Functions",
    "description": "Returns the list of unique values in the input list.",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "unique([1, 1, 2])\n/* => [1, 2] */",
    "exampleBasic": "unique([1, 1, 2])",
    "exampleBasicDot": "",
    "linkNotion": "f1ffa5dc67364644bda07207b8e3cbf7",
    "new": "2.0"
  },
  {
    "name": "includes ",
    "id": 73,
    "type": "Functions",
    "description": "Returns true if the list contains the specified value, and false otherwise.",
    "category": "Lists",
    "accepts": "List",
    "returns": "Boolean",
    "iconAccepts": "list.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "includes([\"a\", \"b\", \"c\"], \"b\")\n/* => true */",
    "exampleBasic": "includes([\"a\", \"b\", \"c\"], \"b\")",
    "exampleBasicDot": "",
    "linkNotion": "f33a23c3c568476d810dc22937e00c3f",
    "new": "2.0"
  },
  {
    "name": "find",
    "id": 74,
    "type": "Functions",
    "description": "Returns the first element in the list for which the condition returns true.",
    "category": "Lists",
    "accepts": "List",
    "returns": "All Data Types",
    "iconAccepts": "list.svg",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "find([\"a\", \"b\", \"c\"], current == \"b\")\n/* => \"b\" */",
    "exampleBasic": "find([\"a\", \"b\", \"c\"], current == \"b\")",
    "exampleBasicDot": "",
    "linkNotion": "4f64346ec72e4367a371d18d6032fe0c",
    "new": "2.0"
  },
  {
    "name": "findIndex ",
    "id": 75,
    "type": "Functions",
    "description": "Returns the index of the first item in the list for which the condition evaluates to true.",
    "category": "Lists",
    "accepts": "List",
    "returns": "Number",
    "iconAccepts": "list.svg",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "findIndex([\"a\", \"b\", \"c\"], current == \"b\")\n/* => 1 */",
    "exampleBasic": "findIndex([\"a\", \"b\", \"c\"], current == \"b\")",
    "exampleBasicDot": "",
    "linkNotion": "3c14e43708124e7c975913b05ac37c36",
    "new": "2.0"
  },
  {
    "name": "filter",
    "id": 76,
    "type": "Functions",
    "description": "Returns the values in the list for which the condition is true.",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "filter([1, 2, 3], current > 1)\n/* => [2, 3] */",
    "exampleBasic": "filter([1, 2, 3], current > 1)",
    "exampleBasicDot": "",
    "linkNotion": "3a0a85a01c504706a28b0b3ee6ede32c",
    "new": "2.0"
  },
  {
    "name": "some ",
    "id": 77,
    "type": "Functions",
    "description": "Returns true if any item in the list satisfies the given condition, and false otherwise.",
    "category": "Lists",
    "accepts": "List",
    "returns": "Boolean",
    "iconAccepts": "list.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "some([1, 2, 3], current == 2)\n/* => true */",
    "exampleBasic": "some([1, 2, 3], current == 2)",
    "exampleBasicDot": "",
    "linkNotion": "2594eac097c04d40b8a7a362d31afca4",
    "new": "2.0"
  },
  {
    "name": "every",
    "id": 78,
    "type": "Functions",
    "description": "Returns true if every item in the list satisfies the given condition, and false otherwise.",
    "category": "Lists",
    "accepts": "List",
    "returns": "Boolean",
    "iconAccepts": "list.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "every([1, 2, 3], current > 0)\n/* => true */",
    "exampleBasic": "every([1, 2, 3], current > 0)",
    "exampleBasicDot": "",
    "linkNotion": "ae07d42736554a3798921df49b1c3832",
    "new": "2.0"
  },
  {
    "name": "map",
    "id": 79,
    "type": "Functions",
    "description": "Returns the list populated with the results of calling the expression on every item in the input list.",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "map([1, 2, 3], current + 1)\n/* => [2, 3, 4] */",
    "exampleBasic": "map([1, 2, 3], current + 1)",
    "exampleBasicDot": "",
    "linkNotion": "bff04b8862764423af84a3633954361d",
    "new": "2.0"
  },
  {
    "name": "flat",
    "id": 80,
    "type": "Functions",
    "description": "Flattens a list of lists into a single list.",
    "category": "Lists",
    "accepts": "List",
    "returns": "List",
    "iconAccepts": "list.svg",
    "iconReturns": "list.svg",
    "other": "",
    "examples": "flat([[1, 2], [3, 4]])\n/* => [1, 2, 3, 4] */",
    "exampleBasic": "flat([[1, 2], [3, 4]])",
    "exampleBasicDot": "",
    "linkNotion": "00c44153e5cf41eeb4fbcd23b57a95cc",
    "new": "2.0"
  },
  {
    "name": "id",
    "id": 81,
    "type": "Functions",
    "description": "Returns the id of the page. If no page is provided, returns the id of the page the formula is on.",
    "category": "Pages",
    "accepts": "Page",
    "returns": "String",
    "iconAccepts": "page.svg",
    "iconReturns": "string.svg",
    "other": "",
    "examples": "id()\n/* => \"229bf7c60d39452f9a460e8b853f6b7e\" */",
    "exampleBasic": "id()",
    "exampleBasicDot": "",
    "linkNotion": "dc5a4ef1490443a6befb2d23a915e160",
    "new": ""
  },
  {
    "name": "equal",
    "id": 82,
    "type": "Functions",
    "description": "Returns true if both values are equal and false otherwise.",
    "category": "Comparison",
    "accepts": "All Data Types",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "equal(1, 1)\n/* => true */",
    "exampleBasic": "equal(1, 1)",
    "exampleBasicDot": "",
    "linkNotion": "18368d160edb4b5cb63aa38032978cc5",
    "new": ""
  },
  {
    "name": "unequal",
    "id": 83,
    "type": "Functions",
    "description": "Returns false if both values are equal and true otherwise.",
    "category": "Comparison",
    "accepts": "All Data Types",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "unequal(1, 2)\n/* => true */",
    "exampleBasic": "unequal(1, 2)",
    "exampleBasicDot": "",
    "linkNotion": "6c16c37a91b74a7d8f02a6c016b02e38",
    "new": ""
  },
  {
    "name": "let",
    "id": 84,
    "type": "Functions",
    "description": "Assigns a value to a variable and evaluates the expression using that variable.",
    "category": "Variables",
    "accepts": "All Data Types",
    "returns": "All Data Types",
    "iconAccepts": "various.svg",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "let(person, \"Doug Engelbart\", \"Hello, \" + name + \"!\")\n/* => \"Hello, Doug Engelbart!\" */",
    "exampleBasic": "let(person, \"Doug Engelbart\", \"Hello, \" + name + \"!\")",
    "exampleBasicDot": "",
    "linkNotion": "ba4d79eb4a0d43279b0803c3b5eb066e",
    "new": "2.0"
  },
  {
    "name": "lets",
    "id": 85,
    "type": "Functions",
    "description": "Assigns values to multiple variables and evaluates the expression using those variables.",
    "category": "Variables",
    "accepts": "All Data Types",
    "returns": "All Data Types",
    "iconAccepts": "various.svg",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "lets(a, \"Hello\", b, \"world\", a + \" \" + b)\n/* => \"Hello world\" */",
    "exampleBasic": "lets(a, \"Hello\", b, \"world\", a + \" \" + b)",
    "exampleBasicDot": "",
    "linkNotion": "724810275d0c4c5ebed711c824342774",
    "new": "2.0"
  },
  {
    "name": "+",
    "id": 86,
    "type": "Operators",
    "description": "Adds two values together.",
    "category": "Mathematical",
    "accepts": "String, Number",
    "returns": "String, Number",
    "iconAccepts": "various.svg",
    "iconReturns": "various.svg",
    "other": "add",
    "examples": "3 + 2\n/* => 5 */",
    "exampleBasic": "3 + 2",
    "exampleBasicDot": "",
    "linkNotion": "b3c88538fc204d848f3aa2a433606257",
    "new": ""
  },
  {
    "name": "-",
    "id": 87,
    "type": "Operators",
    "description": "Subtracts two numbers.",
    "category": "Mathematical",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "subtract",
    "examples": "3 - 2\n/* => 1 */",
    "exampleBasic": "3 - 2",
    "exampleBasicDot": "",
    "linkNotion": "3b068e8814a04cfa887d8f4029c29f50",
    "new": ""
  },
  {
    "name": "*",
    "id": 88,
    "type": "Operators",
    "description": "Multiplies two numbers.",
    "category": "Mathematical",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "multiply",
    "examples": "3 * 2\n/* => 6 */",
    "exampleBasic": "3 * 2",
    "exampleBasicDot": "",
    "linkNotion": "232fda48c6e34224b2c027ade4b5772c",
    "new": ""
  },
  {
    "name": "%",
    "id": 89,
    "type": "Operators",
    "description": "Returns the first number modulo the second number.",
    "category": "Mathematical",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "mod",
    "examples": "5 % 10\n/* => 5 */",
    "exampleBasic": "5 % 10",
    "exampleBasicDot": "",
    "linkNotion": "8d83fb5f44d744b5b4a045a3ac502961",
    "new": ""
  },
  {
    "name": "^",
    "id": 90,
    "type": "Operators",
    "description": "Returns the result of a base number raised to an exponent power.",
    "category": "Mathematical",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "pow",
    "examples": "5 ^ 10\n/* => 9765625 */",
    "exampleBasic": "5 ^ 10",
    "exampleBasicDot": "",
    "linkNotion": "a7e3772c2e714b27aa7c8391b32c8adf",
    "new": ""
  },
  {
    "name": "/",
    "id": 91,
    "type": "Operators",
    "description": "Divides two numbers.",
    "category": "Mathematical",
    "accepts": "Number",
    "returns": "Number",
    "iconAccepts": "number.svg",
    "iconReturns": "number.svg",
    "other": "divide",
    "examples": "3 / 2\n/* => 1.5 */",
    "exampleBasic": "3 / 2",
    "exampleBasicDot": "",
    "linkNotion": "fd20f9547ba841e89d11eded7b9afeb0",
    "new": ""
  },
  {
    "name": "==",
    "id": 92,
    "type": "Operators",
    "description": "Checks if two values are equal.",
    "category": "Comparison",
    "accepts": "All Data Types",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "equal",
    "examples": "3 == 2\n/* => false */",
    "exampleBasic": "3 == 2",
    "exampleBasicDot": "",
    "linkNotion": "18368d160edb4b5cb63aa38032978cc5",
    "new": ""
  },
  {
    "name": "!=",
    "id": 93,
    "type": "Operators",
    "description": "Checks if two values are not equal.",
    "category": "Comparison",
    "accepts": "All Data Types",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "unequal",
    "examples": "3 != 2\n/* => true */",
    "exampleBasic": "3 != 2",
    "exampleBasicDot": "",
    "linkNotion": "6c16c37a91b74a7d8f02a6c016b02e38",
    "new": ""
  },
  {
    "name": ">",
    "id": 94,
    "type": "Operators",
    "description": "Checks if the first value is greater than the second.",
    "category": "Comparison",
    "accepts": "String, Number, Boolean, Date",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "Greater than",
    "examples": "3 > 2\n/* => true */",
    "exampleBasic": "3 > 2",
    "exampleBasicDot": "",
    "linkNotion": "fe3d9af24103474f91de12a6a0af5ccb",
    "new": ""
  },
  {
    "name": ">=",
    "id": 95,
    "type": "Operators",
    "description": "Checks if the first value is greater than or equal to the second.",
    "category": "Comparison",
    "accepts": "String, Number, Boolean, Date",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "Greater than or equal to",
    "examples": "3 >= 2\n/* => true */",
    "exampleBasic": "3 >= 2",
    "exampleBasicDot": "",
    "linkNotion": "a5831360c7474b5f98bfdf9d224ec374",
    "new": ""
  },
  {
    "name": "<",
    "id": 96,
    "type": "Operators",
    "description": "Checks if the first value is less than the second.",
    "category": "Comparison",
    "accepts": "String, Number, Boolean, Date",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "Less than",
    "examples": "3 < 2\n/* => false */",
    "exampleBasic": "3 < 2",
    "exampleBasicDot": "",
    "linkNotion": "1d98413359264d2298573c25ce7cbe2f",
    "new": ""
  },
  {
    "name": "<=",
    "id": 97,
    "type": "Operators",
    "description": "Checks if the first value is less than or equal to the second.",
    "category": "Comparison",
    "accepts": "String, Number, Boolean, Date",
    "returns": "Boolean",
    "iconAccepts": "various.svg",
    "iconReturns": "boolean.svg",
    "other": "Less than or equal to",
    "examples": "3 <= 2\n/* => false */",
    "exampleBasic": "3 <= 2",
    "exampleBasicDot": "",
    "linkNotion": "696d677f892344cebc0993d0e2b1181f",
    "new": ""
  },
  {
    "name": "&&  ·  and",
    "id": 98,
    "type": "Operators",
    "description": "The boolean operator and.",
    "category": "Logical",
    "accepts": "Boolean",
    "returns": "Boolean",
    "iconAccepts": "boolean.svg",
    "iconReturns": "boolean.svg",
    "other": "and",
    "examples": "true and false\n/* => false */",
    "exampleBasic": "true and false",
    "exampleBasicDot": "",
    "linkNotion": "05895e0e81004fc68b74e92063e34034",
    "new": ""
  },
  {
    "name": "||  ·  or",
    "id": 99,
    "type": "Operators",
    "description": "The boolean operator or.",
    "category": "Logical",
    "accepts": "Boolean",
    "returns": "Boolean",
    "iconAccepts": "boolean.svg",
    "iconReturns": "boolean.svg",
    "other": "or",
    "examples": "true or false\n/* => true */",
    "exampleBasic": "true or false",
    "exampleBasicDot": "",
    "linkNotion": "2dda9a0b9f464d68804b7eb88581731f",
    "new": ""
  },
  {
    "name": "!  ·  not",
    "id": 100,
    "type": "Operators",
    "description": "Returns the opposite of a boolean value.",
    "category": "Logical",
    "accepts": "Boolean",
    "returns": "Boolean",
    "iconAccepts": "boolean.svg",
    "iconReturns": "boolean.svg",
    "other": "not",
    "examples": "not empty(\"Test\")\n/* => true */",
    "exampleBasic": "not empty(\"Test\")",
    "exampleBasicDot": "",
    "linkNotion": "b260005fd7db480aaf4e2d7738544483",
    "new": ""
  },
  {
    "name": "? :",
    "id": 101,
    "type": "Operators",
    "description": "The if ternary operator. Returns the first value if the condition is true. Otherwise, returns the second value.",
    "category": "Ternary",
    "accepts": "Boolean",
    "returns": "All Data Types",
    "iconAccepts": "boolean.svg",
    "iconReturns": "various.svg",
    "other": "if",
    "examples": "true ? 1 : 2\n/* => 1 */",
    "exampleBasic": "true ? 1 : 2",
    "exampleBasicDot": "",
    "linkNotion": "e3fcf03c5c98451181958ba7eb58214f",
    "new": ""
  },
  {
    "name": "true",
    "id": 102,
    "type": "Booleans",
    "description": "The boolean value true.",
    "category": "Values",
    "accepts": "—",
    "returns": "Boolean",
    "iconAccepts": "",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "true\n/* => true */",
    "exampleBasic": "true",
    "exampleBasicDot": "",
    "linkNotion": "57af4ed1a4754d05ab1ff88b30a85531",
    "new": ""
  },
  {
    "name": "false",
    "id": 103,
    "type": "Booleans",
    "description": "The boolean value false.",
    "category": "Values",
    "accepts": "—",
    "returns": "Boolean",
    "iconAccepts": "",
    "iconReturns": "boolean.svg",
    "other": "",
    "examples": "false\n/* => false */",
    "exampleBasic": "false",
    "exampleBasicDot": "",
    "linkNotion": "61dd24285c264bfe9c714c56ec5180b1",
    "new": ""
  },
  {
    "name": "current",
    "id": 104,
    "type": "Variables",
    "description": "Returns the value of the current item in the list function.",
    "category": "Values",
    "accepts": "—",
    "returns": "All Data Types",
    "iconAccepts": "",
    "iconReturns": "various.svg",
    "other": "",
    "examples": "map([1, 2, 3], current + 1)\n/* => [2, 3, 4] */",
    "exampleBasic": "map([1, 2, 3], current + 1)",
    "exampleBasicDot": "",
    "linkNotion": "27ff4364e6ac4abfb2b79c30d1d50e6b",
    "new": ""
  },
  {
    "name": "index",
    "id": 105,
    "type": "Variables",
    "description": "Returns the index of the current item in the list function, starting from 0.",
    "category": "Values",
    "accepts": "—",
    "returns": "Number",
    "iconAccepts": "",
    "iconReturns": "number.svg",
    "other": "",
    "examples": "map([1, 2, 3], current + index)\n/* => [1, 3, 5] */",
    "exampleBasic": "map([1, 2, 3], current + index)",
    "exampleBasicDot": "",
    "linkNotion": "1febc6abe7024b9caf02ee12aa87ed8a",
    "new": ""
  }
]