import { useState } from "react";
import { Action, ActionPanel, List, Detail, Icon, Color } from "@raycast/api";
import { useCachedPromise } from "@raycast/utils";

interface Formula {
  name: string;
  type: string;
  description: string;
  accepts: string;
  returns: string;
  converts: string;
  exampleBasic: string;
  exampleComplex: string;
  id: string;
  icon: string;
  more: string;
}

const formulas: Formula[] = [
  {
    name: "if",
    type: "Function",
	description: "**if(condition, ifTrue, ifFalse)**\n\nReturns the first value if the condition is `true`; otherwise, returns the second value.\n\n```js\nif(true, 1, 2)\n= 1\n```",
	accepts: "All Data Types",
	returns: "All Data Types",
	converts: "n/a",
    id: "if",
	icon: "various.svg",
	exampleBasic: "if(true, 1, 2)",
	exampleComplex: "",
	more: "e3fcf03c5c98451181958ba7eb58214f"
  },
  {
    name: "ifs",
    type: "Function",
	description: "**ifs(condition, ifTrue, condition2, ifTrue2, ..., else)**\n\nReturns the value that corresponds to the first `true` condition. This can be used as an alternative to multiple nested `if()` statements.\n\n```js\nif(true, 1, true, 2, 3)\n= 1\n```",
	accepts: "All Data Types",
	returns: "All Data Types",
	converts: "",
    id: "ifs",
	icon: "various.svg",
	exampleBasic: "ifs(true, 1, true, 2, 3)",
	exampleComplex: "",
	more: "230a126848784fe6845f73a64f1ea4f0"
  },
  {
    name: "empty",
    type: "Function",
    description: "**value.empty()**\n\nReturns `true` if the value is empty. `0`, `\"\"`, `false`, and `[]` are considered empty.\n\n```js\n0.empty()\n= true\n```",
    accepts: "All Data Types",
    returns: "Boolean",
	converts: "",
    id: "empty",
    icon: "boolean.svg",
	exampleBasic: "",
	exampleComplex: "",
	more: "24fe54f9484140a28a9ff7e25dd3e1ed"
  },
  {
    name: "length",
    type: "Function",
	description: "**value.length()**\n\nReturns the length of the text or list value.\n\n```js\n\"Notion\".length()\n= 5\n```",
	accepts: "Text, List",
	returns: "Number",
	converts: "",
    id: "length",
	icon: "number.svg",
	exampleBasic: "",
	exampleComplex: "",
	more: "bddea8a85a3444699ea656af42e0c53c"
  },
  {
    name: "substring",
    type: "Function",
    description: "**text.substring(startIndex, endIndex?)**\n\nReturns the substring of the text from the start index (inclusive) to the end index (optional and exclusive).\n\n```js\n\"Notion\".substring(0, 3)\n= \"Not\"\n```",
    accepts: "Text",
    returns: "Text",
	converts: "",
    id: "substring",
    icon: "text.svg",
    exampleBasic: "\"Notion\".substring(0, 3)",
	exampleComplex: "",
	more: "623844f5ee7147228dcc94ea68eefde9"
  },
  {
    name: "contains",
    type: "Function",
    description: "**value.contains(search)**\n\nReturns `true` if the search string is present in the value.\n\n	\"Notion\".contains(\"ot\")\n	= true",
    accepts: "Text",
    returns: "Boolean",
	converts: "",
    id: "contains",
    icon: "boolean.svg",
    exampleBasic: "\"Notion\".contains(\"ot\")",
	exampleComplex: "",
	more: "8f16ae1e5ed9474c8311deb43ffe6834"
  },
  {
    name: "test",
    type: "Function",
    description: "**text.test(pattern)**\n\nReturns `true` if the value matches the regular expression and `false` otherwise.\n\n```js\n\"Notion\".test(\"Not\")\n= true\n```",
    accepts: "Text",
    returns: "Boolean",
	converts: "",
    id: "test",
    icon: "boolean.svg",
    exampleBasic: "\"Notion\".test(\"Not\")",
	exampleComplex: "",
	more: "fd12107cd2d64438aba853b462348a5a"
  },
  {
    name: "match",
    type: "Function",
    description: "**text.match(pattern)**\n\nReturns all matches of the regular expression as a list.\n\n```js\n\"Notion Notion\".match(\"Not\")\n= [\"Not\", \"Not\"]\n```",
    accepts: "Text",
    returns: "List",
    converts: "",
    id: "match",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
	more: "2e065854c9634dbe8e30d251db91d341"
  },
  {
    name: "replace",
    type: "Function",
    description: "**text.replace(pattern, replacement?)**\n\nReplaces the first match of the regular expression with the replacement value.\n\n```js\n\"Notion Notion\".replace(\"N\", \"M\")\n= \"Motion Notion\"\n```",
    accepts: "Text",
    returns: "Text",
    converts: "",
    id: "replace",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
	more: "543a48a3c2b94bafa2671a6438a556ff"
  },
  {
    name: "replaceAll",
    type: "Function",
    description: "**text.replaceAll(pattern, replacement?)**\n\nReplaces all matches of the regular expression with the replacement value.\n\n```js\n\"Notion Notion\".replaceAll(\"N\", \"M\")\n= \"Motion Motion\"\n```",
    accepts: "Text",
    returns: "Text",
    converts: "",
    id: "replaceAll",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
	more: "543a48a3c2b94bafa2671a6438a556ff"
  },
  {
    name: "lower",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "lower",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "upper",
    id: "upper",
    type: "",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "repeat",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "repeat",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "link",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "link",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "style",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "style",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "unstyle",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "unstyle",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "format",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "format",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "add",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "add",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "subtract",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "subtract",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "multiply",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "multiply",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "mod",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    id: "mod",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "pow",
    id: "pow",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "divide",
    id: "divide",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "min",
    id: "min",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "max",
    id: "max",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "sum",
    id: "sum",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "abs",
    id: "abs",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "round",
    id: "round",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "ceil",
    id: "ceil",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "floor",
    id: "floor",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "sqrt",
    id: "sqrt",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "cbrt",
    id: "cbrt",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "exp",
    id: "exp",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "ln",
    id: "ln",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "log10",
    id: "log10",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "log2",
    id: "log2",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "sign",
    id: "sign",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "pi",
    id: "pi",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "e",
    id: "e",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "",
    returns: "",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "toNumber",
    id: "toNumber",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Text, Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "now",
    id: "now",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Nothing",
    returns: "Date",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "minute",
    id: "minute",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "hour",
    id: "hour",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "day",
    id: "day",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "date",
    id: "date",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "week",
    id: "week",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "month",
    id: "month",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "year",
    id: "year",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "dateAdd",
    id: "dateAdd",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Date",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "dateSubtract",
    id: "dateSubtract",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Date",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "dateBetween",
    id: "dateBetween",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "Number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "dateRange",
    id: "dateRange",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Date Range",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "dateStart",
    id: "dateStart",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date, Date Range",
    returns: "Date",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "dateEnd",
    id: "dateEnd",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Date",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "timestamp",
    id: "timestamp",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "fromTimestamp",
    id: "fromTimestamp",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Number",
    returns: "Date",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "formatDate",
    id: "formatDate",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Date",
    returns: "Text",
    converts: "",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "parseDate",
    id: "parseDate",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Text",
    returns: "Date",
    converts: "",
    icon: "date.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "name",
    id: "name",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Person",
    returns: "Text",
    converts: "",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "email",
    id: "email",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Person",
    returns: "Text",
    converts: "",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "at",
    id: "at",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "All Data Types",
    converts: "",
    icon: "various.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "first",
    id: "first",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "All Data Types",
    converts: "",
    icon: "various.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "last",
    id: "last",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "All Data Types",
    converts: "",
    icon: "various.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "slice",
    id: "slice",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "concat",
    id: "concat",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "sort",
    id: "sort",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "reverse",
    id: "reverse",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "join",
    id: "join",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "Text",
    converts: "",
    icon: "text.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "split",
    id: "split",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Text",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "unique",
    id: "unique",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "includes",
    id: "includes",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "Boolean",
    converts: "",
    icon: "boolean.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "find",
    id: "find",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "All Data Types",
    converts: "",
    icon: "various.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "findIndex",
    id: "findIndex",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "Number",
    converts: "",
    icon: "number.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "filter",
    id: "filter",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "some",
    id: "some",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "Boolean",
    converts: "",
    icon: "boolean.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "every",
    id: "every",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "Voolean",
    converts: "",
    icon: "boolean.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "map",
    id: "map",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "flat",
    id: "flat",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "List",
    returns: "List",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "id",
    id: "id",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Nothing",
    returns: "Text",
    converts: "",
    icon: "list.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "equal",
    id: "equal",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "All Data Types",
    returns: "Boolean",
    converts: "",
    icon: "boolean.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "unequal",
    id: "unequal",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "All Data Types",
    returns: "Boolean",
    converts: "",
    icon: "boolean.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "let",
    id: "let",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Variable, All Data Types",
    returns: "All Data Types",
    converts: "",
    icon: "various.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
  {
    name: "lets",
    id: "lets",
    type: "Function",
    description: "**ttl**\n\n des\n\n```js\n exp\n= out\n```",
    accepts: "Variable, All Data Types",
    returns: "All Data Types",
    converts: "",
    icon: "various.svg",
    exampleBasic: "",
    exampleComplex: "",
    more: "",
  },
];

export default function Command() {
  const [showingDetail, setShowingDetail] = useState(true);
  const { data, isLoading } = useCachedPromise(() => new Promise<Formula[]>((resolve) => resolve(formulas)));

  return (
    <List isLoading={isLoading} isShowingDetail={showingDetail}>
		<List.Section title="Functions" subtitle="">
		      {data &&
        data.map((formula) => {
          const props: Partial<List.Item.Props> = showingDetail
            ? {
                detail: (
                  <List.Item.Detail
                    markdown={formula.description}
					metadata={
						<Detail.Metadata>
							<Detail.Metadata.Label title="Type" text={formula.type} />
							<Detail.Metadata.Separator />
							<Detail.Metadata.Label title="Accepts" text={formula.accepts} />
							<Detail.Metadata.Separator />
							{/* <Detail.Metadata.Label title="Converts" text={formula.converts} />
							<Detail.Metadata.Separator /> */}
							<Detail.Metadata.Label title="Returns" text={formula.returns} />
							<Detail.Metadata.Separator />
							<Detail.Metadata.Link title="More" target={`https://bensomething.notion.site/${formula.more}`} text={formula.name} />
						</Detail.Metadata>
					  }
                  />
                ),
              }
            : { accessories: [{  }] };
          return (
            <List.Item
              key={formula.id}
              title={formula.name}
			  icon={{ source: formula.icon, tintColor: {
				light: "#aaa",
				dark: "#777",
				adjustContrast: false,
			  }, }}
			  accessories={ [{ text: "" }]}
              /* subtitle={`Returns: ${formula.id}`} */
              {...props}
              actions={
                <ActionPanel>
                  {/* <Action.OpenInBrowser url={`https://www.pokemon.com/us/pokedex/${formula.name}`} /> */}
                  {/* <Action title="Toggle Detail" onAction={() => setShowingDetail(!showingDetail)} /> */}
				  <Action.Paste title="Paste Basic Example" content={formula.exampleBasic} />
				  <Action.Paste title="Paste Complex Example" content={formula.exampleComplex} />
				  <Action.OpenInBrowser url={`https://bensomething.notion.site/${formula.more}`} shortcut={{ modifiers: ["cmd"], key: "o" }} />
                </ActionPanel>
              }
            />
          );
        })}
		</List.Section>
    </List>
  );
}
