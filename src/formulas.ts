export default {
"Functions": [
{
name: "if",
description: "### if(condition, ifTrue, ifFalse)\nReturns the first value if the condition is `true`. Otherwise, returns the second value.\n\n```js\nif(true, 1, 2)\t/* => 1 */\n\ntrue.if(1, 2)\t/* => 1 */\n```",
accepts: "All Data Types",
returns: "All Data Types",
converts: "n/a",
other: "? :",
icon: "various.svg",
exampleBasic: "if(true, 1, 2)",
exampleComplex: "",
more: "e3fcf03c5c98451181958ba7eb58214f",
altVersion: "? :",
altVersionLabel: "Operator Version"
},
{
name: "ifs",
description: "### ifs(condition, ifTrue, condition2, ifTrue2, ..., else)\nReturns the value that corresponds to the first `true` condition. This can be used as an alternative to multiple nested `if()` statements.\n```js\nif(true, 1, true, 2, 3)\t/* => 1 */\n\ntrue.if(1, true, 2, 3)\t/* => 1 */\n```",
accepts: "All Data Types",
returns: "All Data Types",
converts: "",
other: "",
icon: "various.svg",
exampleBasic: "ifs(true, 1, true, 2, 3)",
exampleComplex: "",
more: "230a126848784fe6845f73a64f1ea4f0",
altVersion: "true.ifs(1, true, 2, 3)",
altVersionLabel: "Dot Version"
},
{
name: "empty",
description: "### empty(value)\n\nReturns `true` if the value is empty. `0`, `\"\"`, `false`, and `[]` are considered empty.\n\n```js\nempty(0)\t\t/* => true */\nempty(\"\")\t/* => true */\n\n[].empty()\t/* => true */\n```",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
other: "",
icon: "boolean.svg",
exampleBasic: "",
exampleComplex: "",
more: "24fe54f9484140a28a9ff7e25dd3e1ed",
altVersion: "value.empty()",
altVersionLabel: "Dot Notation"
},
{
name: "length",
description: "### value.length()\nReturns the length of the text or list value.\n\n```js\n\"Notion\".length()\n= 5\n```",
accepts: "Text, List",
returns: "Number",
converts: "",
other: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "bddea8a85a3444699ea656af42e0c53c",
altVersion: "value.length()",
altVersionLabel: "Dot Version"
},
{
name: "substring",

description: "### text.substring(startIndex, endIndex?)\nReturns the substring of the text from the start index (inclusive) to the end index (optional and exclusive).\n\n```js\n\"Notion\".substring(0, 3)\n= \"Not\"\n```",
accepts: "Text",
returns: "Text",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "\"Notion\".substring(0, 3)",
exampleComplex: "",
more: "623844f5ee7147228dcc94ea68eefde9",
altVersion: "",
altVersionLabel: ""
},
{
name: "contains",

description: "### value.contains(search)\nReturns `true` if the search string is present in the value.\n\n	\"Notion\".contains(\"ot\")\n	= true",
accepts: "Text",
returns: "Boolean",
converts: "",
other: "",
icon: "boolean.svg",
exampleBasic: "\"Notion\".contains(\"ot\")",
exampleComplex: "",
more: "8f16ae1e5ed9474c8311deb43ffe6834",
altVersion: "",
altVersionLabel: ""
},
{
name: "test",

description: "### text.test(pattern)\nReturns `true` if the value matches the regular expression and `false` otherwise.\n\n```js\n\"Notion\".test(\"Not\")\n= true\n```",
accepts: "Text",
returns: "Boolean",
converts: "",
other: "",
icon: "boolean.svg",
exampleBasic: "\"Notion\".test(\"Not\")",
exampleComplex: "",
more: "fd12107cd2d64438aba853b462348a5a",
altVersion: "",
altVersionLabel: ""
},
{
name: "match",

description: "### text.match(pattern)\nReturns all matches of the regular expression as a list.\n\n```js\n\"Notion Notion\".match(\"Not\")\n= [\"Not\", \"Not\"]\n```",
accepts: "Text",
returns: "List",
converts: "",
other: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "2e065854c9634dbe8e30d251db91d341",
altVersion: "",
altVersionLabel: ""
},
{
name: "replace",

description: "### text.replace(pattern, replacement?)\nReplaces the first match of the regular expression with the replacement value.\n\n```js\n\"Notion Notion\".replace(\"N\", \"M\")\n= \"Motion Notion\"\n```",
accepts: "Text",
returns: "Text",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "543a48a3c2b94bafa2671a6438a556ff",
altVersion: "",
altVersionLabel: ""
},
{
name: "replaceAll",

description: "### text.replaceAll(pattern, replacement?)\nReplaces all matches of the regular expression with the replacement value.\n\n```js\n\"Notion Notion\".replaceAll(\"N\", \"M\")\n= \"Motion Motion\"\n```",
accepts: "Text",
returns: "Text",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "543a48a3c2b94bafa2671a6438a556ff",
altVersion: "",
altVersionLabel: ""
},
{
name: "lower",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "upper",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "repeat",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "link",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "style",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "unstyle",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "format",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "add",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "subtract",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "multiply",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "mod",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
other: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "pow",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "divide",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "min",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "max",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "sum",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "abs",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "round",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "ceil",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "floor",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "sqrt",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "cbrt",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "exp",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "ln",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "log10",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "log2",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "sign",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "pi",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "e",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "",
returns: "",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "toNumber",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Text, Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "now",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Nothing",
returns: "Date",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "minute",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "hour",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "day",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "date",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "week",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "month",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "year",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "dateAdd",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Date",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "dateSubtract",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Date",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "dateBetween",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "Number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "dateRange",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Date Range",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "dateStart",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date, Date Range",
returns: "Date",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "dateEnd",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Date",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "timestamp",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "fromTimestamp",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Number",
returns: "Date",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "formatDate",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Date",
returns: "Text",
converts: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "parseDate",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Text",
returns: "Date",
converts: "",
icon: "date.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "name",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Person",
returns: "Text",
converts: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "email",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Person",
returns: "Text",
converts: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "at",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "All Data Types",
converts: "",
icon: "various.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "first",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "All Data Types",
converts: "",
icon: "various.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "last",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "All Data Types",
converts: "",
icon: "various.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "slice",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "concat",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "sort",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "reverse",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "join",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "Text",
converts: "",
icon: "text.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "split",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Text",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "unique",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "includes",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "Boolean",
converts: "",
icon: "boolean.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "find",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "All Data Types",
converts: "",
icon: "various.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "findIndex",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "Number",
converts: "",
icon: "number.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "filter",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "some",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "Boolean",
converts: "",
icon: "boolean.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "every",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "Voolean",
converts: "",
icon: "boolean.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "map",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "flat",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "List",
returns: "List",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "id",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Nothing",
returns: "Text",
converts: "",
icon: "list.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "equal",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
icon: "boolean.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "unequal",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
icon: "boolean.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "let",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Variable, All Data Types",
returns: "All Data Types",
converts: "",
icon: "various.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "lets",
other: "",

description: "### ttl\n des\n\n```js\n exp\n= out\n```",
accepts: "Variable, All Data Types",
returns: "All Data Types",
converts: "",
icon: "various.svg",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
],
"Operators": [
{
name: "+",
description: "### value + value\n\nAdds two values together.\n\n```js\n3 + 2\n= 5\n```\n\n```js\n\"Hello\" + \" world!\"\n= \"Hello world!\"\n```",
icon: "various.svg",
other: "add",
accepts: "Text, Number",
returns: "Text, Number",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "-",
description: "### number - number \n\nSubtracts two numbers.\n\n```js\n",
icon: "number.svg",
other: "subtract",
accepts: "Number",
returns: "Number",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "*",
description: "### number * number \n\nMultiplies two numbers.",
icon: "number.svg",
other: "multiply",
accepts: "Number",
returns: "Number",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "/",
description: "### number / number \n\nDivides two numbers.",
icon: "number.svg",
other: "divide",
accepts: "Number",
returns: "Number",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "%",
description: "### number % number \n\nReturns the first number modulo the second number.",
icon: "number.svg",
other: "mod",
accepts: "Number",
returns: "Number",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "^",
description: "### number ^ number \n\n",
icon: "number.svg",
other: "pow",
accepts: "Number",
returns: "Number",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "==",
description: "### value > value \n\n",
icon: "boolean.svg",
other: "equal",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "!=",
description: "### value > value \n\n",
icon: "boolean.svg",
other: "unequal",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: ">",
description: "### value > value \n\n",
icon: "boolean.svg",
other: "Greater than",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: ">=",
description: "### value > value \n\n",
icon: "boolean.svg",
other: "Greater than or equal to",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "<",
description: "### value < value \n\n",
icon: "boolean.svg",
other: "Less than",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "<=",
description: "### value <= value \n\n",
icon: "boolean.svg",
other: "Less than or equal to",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "&&",
description: "",
icon: "boolean.svg",
other: "and",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "||",
description: "",
icon: "boolean.svg",
other: "or",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "!",
description: "",
icon: "boolean.svg",
other: "not",
accepts: "All Data Types",
returns: "Boolean",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "? :",
description: "### condition ? ifTrue : ifFalse\n\nThe `if` ternary operator.",
icon: "various.svg",
other: "if",
accepts: "All Data Types",
returns: "All Data Types",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
],
"Booleans": [
{
name: "true",
description: "### Yeah\nYeah",
icon: "boolean.svg",
other: "",
accepts: "List",
returns: "List",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "false",
description: "",
icon: "false.svg",
other: "",
accepts: "List",
returns: "List",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
],
"Variables": [
{
name: "current",
description: "",
icon: "various.svg",
other: "",
accepts: "All Data Types",
returns: "All Data Types",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
{
name: "index",
description: "",
icon: "number.svg",
other: "",
accepts: "List",
returns: "Number",
converts: "",
exampleBasic: "",
exampleComplex: "",
more: "",
altVersion: "",
altVersionLabel: ""
},
],
};